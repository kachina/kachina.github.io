<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Ship of Fools</title>
    <link>https://kachina.github.io/categories/development/</link>
    <description>Recent content in Development on Ship of Fools</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>Code released under the Apache 2.0 license.</copyright>
    <lastBuildDate>Tue, 03 Jan 2017 23:12:37 +0900</lastBuildDate>
    
	<atom:link href="https://kachina.github.io/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>xcodeからリモートのGitリポジトリの認証に既存の秘密鍵をつかう</title>
      <link>https://kachina.github.io/post/2017-01-03-xcode-git-auth/</link>
      <pubDate>Tue, 03 Jan 2017 23:12:37 +0900</pubDate>
      
      <guid>https://kachina.github.io/post/2017-01-03-xcode-git-auth/</guid>
      <description>やりたいことができるアプリが App Store になかったので、いまさらながら iPhone アプリの実装にチャレンジすることにしました。 Swift のチュートリアルをやっているのですが、ステップ毎に Git リポジトリにコミットしてリモートの BitBucket に Push しておこうと思った際につまずいたのでメモしておきます。
実行環境は以下のとおりです。
 Xcode 8.2.1 Remote Gitリポジトリ: BitBucket 認証方式: 公開鍵認証  リモートリポジトリ(BitBucket)側に登録されている公開鍵 既に Xcode 以外の開発環境でも BitBucket は利用しているので公開鍵の設定は済んでおり、登録済みの鍵ペアは以下のとおりです。
 ~/.ssh/foo.pem (秘密鍵) ~/.ssh/foo.pub (公開鍵)  リモートリポジトリの登録 まず、Xcode からリモートリポジトリを設定を実施します。
 [menu bar] -&amp;gt; [Source Control] -&amp;gt; [&amp;ldquo;プロジェクト名&amp;rdquo; &amp;ndash; master] -&amp;gt; [Configure &amp;ldquo;プロジェクト名&amp;rdquo;&amp;hellip;] でサブウィンドウを開く [Remote]タブの ＋ から[Add Remote&amp;hellip;] からリモートリポジトリを登録します。  リモートリポジトリへのPush チュートリアルを進めて、いざリモートリポジトリにPushしようとしたら秘密鍵を作成するよう為のガイダンスが表示されてしまいました。
わたしとしては、既にリモートリポジトリに登録済みの ~/.ssh/foo.pem で認証したいのですが、その選択肢はないようです。
色々調べてみたところデフォルトでは ~/.ssh/id_rsa を参照するようでしたので、以下のコマンドでシンボリックリンクを貼ることで、新たに鍵ペアを増やすことなくSSH鍵認証で BitBucket を利用することができました。</description>
    </item>
    
    <item>
      <title>13.3インチのディスプレイのみで働く工夫</title>
      <link>https://kachina.github.io/post/2015-02-15-bartender/</link>
      <pubDate>Sun, 15 Feb 2015 09:35:37 +0900</pubDate>
      
      <guid>https://kachina.github.io/post/2015-02-15-bartender/</guid>
      <description>これからはオフィスや自宅以外で働くことも多くなるので、場所にとらわれず同じ生産性を出す為に『持ち歩けないものは使わない』ってチャレンジを初めてから2年が経ちました。 振り返りに良いタイミングなので、2年間の変化を整理しておきたいと思います。
この2年で使わなくなったもの  外部ディスプレイ / Happy Hackingのキーボード / Logicoolの親指トラックボールマウス
この3つは慣れるまでシンドかった iPad
持ち歩いていたが全く利用しないことに気が付いた モバイルバッテリー Ethernetアダプタ EMOBILE
以下のサービスで代用  iPhone テザリング au Wi-Fi SPOT 公衆無線LAN   いまも持ち歩いているもの  13-inch MacBook Air  Mini DisplayPort (VGA) : プロジェクタ接続用 Mini DisplayPort (HDMI) : プロジェクタ接続用 電源アダプタ  iPhone 6 (au)  Lightning USBケーブル USB 電源アダプタ   毎日持ち歩くモノが減ったことが最良の出来事かもしれません。
さて、キーボード/マウスは耐えるのみでしたが『外部ディスプレイを使わない』については、13.3インチの小さいディスプレイを有効に利用する為に 徹底して不要な情報は出力しない を実施しました。
前置きが長くなりましたが、今回はこれについて書きたいと思います。
はじめに、自分はIDEを使いません。 開発環境はターミナルとブラウザに集約させています。
 iTerm2 (ターミナル)
 tmux (ターミナルマルチプレクサ) earthquake (Twitterクライアント) vim (エディタ)  FireFox (ブラウザ)</description>
    </item>
    
    <item>
      <title>earthquakeのつぶやきをGrowlで通知する</title>
      <link>https://kachina.github.io/post/2015-02-11-earthquake-growl-notify/</link>
      <pubDate>Wed, 11 Feb 2015 11:39:37 +0900</pubDate>
      
      <guid>https://kachina.github.io/post/2015-02-11-earthquake-growl-notify/</guid>
      <description>earthquakeにストリームされるつぶやきをGrowlで通知する方法です。
1. Growlのインストール App Storeから Growl をインストール
2. growlnotifyのインストール $ brew install Caskroom/cask/growlnotify  3. スクリプトの設置 ~/.earthquake/plugin/growlnotify.rb に以下のファイルを作成
require &amp;quot;fileutils&amp;quot; require &amp;quot;digest/md5&amp;quot; Earthquake.init do dir = File.join(File.dirname(__FILE__), &amp;quot;userimage&amp;quot;) output do |item| next if item.nil? || item[&amp;quot;user&amp;quot;].nil? || item[&amp;quot;_stream&amp;quot;].nil? begin image_url = item[&amp;quot;user&amp;quot;][&amp;quot;profile_image_url&amp;quot;] next unless image_url name = Digest::MD5.hexdigest image_url path = File.join(dir, name.chars.first, name) FileUtils.mkdir_p(File.dirname(path)) arg = { &amp;quot;-t&amp;quot; =&amp;gt; &amp;quot;#{item[&amp;quot;user&amp;quot;][&amp;quot;screen_name&amp;quot;]}(earthquake.gem)&amp;quot;, &amp;quot;-m&amp;quot; =&amp;gt; item[&amp;quot;text&amp;quot;], &amp;quot;--image&amp;quot; =&amp;gt; path, } EM.defer( lambda { return path if File.</description>
    </item>
    
    <item>
      <title>earthquakeが動かなくなった</title>
      <link>https://kachina.github.io/post/2015-02-08-earthquake/</link>
      <pubDate>Sun, 08 Feb 2015 13:47:37 +0900</pubDate>
      
      <guid>https://kachina.github.io/post/2015-02-08-earthquake/</guid>
      <description>諸事情あって、やっとYosemiteへのバージョンアップ許可がでたので アップグレードを繰り返してきたMacbook Airを、この機会にクリーンインストールに挑戦をしました。
愛用していた LockScreen2 が使えなくなったこと以外は購入済みのツールは復旧ができてひと安心 スクリーンロックは 電源 + s でディスプレイをオフにできるみたいなので、当面はこれで対応することにします。
順調に開発環境は整ったのですが、ターミナル向けツイッタークライアントの earthquake を動かすのに苦労したので書き残しておこうと思います。
環境は以下のとおり
 OS X 10.10.2 Ruby 2.2.0 earthquake 1.0.2  activesupportの読み込みに失敗する インストール後、earthquakeを起動すると以下のエラーが出力されました。
/Users/kachina_t/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/activesupport-4.2.0/lib/active_support/core_ext/module/deprecation.rb:21:in `deprecate&#39;: uninitialized constant ActiveSupport::Deprecation (NameError) from /Users/kachina_t/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/activesupport-4.2.0/lib/active_support/core_ext/class/delegating_attributes.rb:26:in `&amp;lt;class:Class&amp;gt;&#39; from /Users/kachina_t/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/activesupport-4.2.0/lib/active_support/core_ext/class/delegating_attributes.rb:6:in `&amp;lt;top (required)&amp;gt;&#39; from /Users/kachina_t/.rbenv/versions/2.2.0/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require&#39; from /Users/kachina_t/.rbenv/versions/2.2.0/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require&#39; from /Users/kachina_t/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/activesupport-4.2.0/lib/active_support/core_ext/class.rb:2:in `&amp;lt;top (required)&amp;gt;&#39; from /Users/kachina_t/.rbenv/versions/2.2.0/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require&#39; from /Users/kachina_t/.rbenv/versions/2.2.0/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require&#39; from /Users/kachina_t/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/activesupport-4.2.0/lib/active_support/core_ext.rb:2:in `block in &amp;lt;top (required)&amp;gt;&#39; from /Users/kachina_t/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/activesupport-4.2.0/lib/active_support/core_ext.rb:1:in `each&#39; from /Users/kachina_t/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/activesupport-4.2.0/lib/active_support/core_ext.rb:1:in `&amp;lt;top (required)&amp;gt;&#39; from /Users/kachina_t/.</description>
    </item>
    
    <item>
      <title>VimparatorとMiddlemanとOpenDyslexic</title>
      <link>https://kachina.github.io/post/2014-12-28-environment/</link>
      <pubDate>Sun, 28 Dec 2014 13:41:37 +0900</pubDate>
      
      <guid>https://kachina.github.io/post/2014-12-28-environment/</guid>
      <description>2014年の年末なので、本年の開発環境の変化からベスト3をピックアップして投稿したいと思います。
Vimperator Firefox のキーバインディングを Vim のように設定できる『Vimperator 』です。
:o google.com 現在のタブ、:t google.com で新しいタブでページを開いたり、 / {word} でページ内検索
Firefoxのスマートキーワードを設定しておけば :t {keyword} foo で検索を実行することができます。
 y でURLをクリップボードにコピー(ヤンク) :ls でタブをリスト表示 :b {n} でタブへ移動 :bw でタブを閉じる :q でブラウザを閉じる :w でページをダウンロード  冗談みたいだけど、完成度がすばらしく高くて、本当にVimライクにFirefoxが使えてしまいます。
Middleman 現在、本ブログはGitHub Pages + jekyll + Octpressで構成されているのですが
職場で使っているブログをMiddleman + Amazon S3で構成してみたところ、とても使い勝手が良かったので本ブログも同じ構成に移行したいなと考えています。
すごい好きなのですが、デザインテンプレートが少ないのが難点です。
OpenDyslexic OpenDyslexicは、識字障害者の為に開発されたフォントです。
pとq / bとd / nとuなど、識字することが難しい文字を敢えて歪ませたり、
全体的に文字の下部を厚くして重みを持たせることで、動いて見えないように工夫されています。
Rictyフォント(ラテン文字にInconsolata)を使っていたのですが、とても目が疲れたので別のものを探していて見つけたフォントです。
僕自身は識字障害と診断されたことはありませんが、この識字率を上げる為の工夫は効果があるのではないかと考え試してみました。
比較用に新旧のフォント画像を貼っておきます。
Inconsolataフォント OpenDyslexicフォント フォントを変更してから2〜3日は違和感がありました。
馴染んでからは、感覚的な表現で申し訳ないのですが流し読みでも文字が止まっていると言うか、視野内で動かないと言うか。。。
以前より、目は疲れていないと思います。
まとめ 仕事道具の手入れをサボらないってのは、良い仕事をする為の最低条件だと思うので
これからも色々試してみたいと思います。</description>
    </item>
    
    <item>
      <title>FedoraからApple TVを利用</title>
      <link>https://kachina.github.io/post/2014-09-21-airplay-from-fedora/</link>
      <pubDate>Sun, 21 Sep 2014 20:51:37 +0900</pubDate>
      
      <guid>https://kachina.github.io/post/2014-09-21-airplay-from-fedora/</guid>
      <description>FedoraからをApple TVを操作する方法です。
環境情報 $ cat /etc/issue [~] Fedora release 20 (Heisenbug) Kernel \r on an \m (\l) $ ruby -v [~] ruby 2.1.2p95 (2014-05-08 revision 45877) [i686-linux] $ java -version [~] java version &amp;quot;1.7.0_65&amp;quot; OpenJDK Runtime Environment (fedora-2.5.2.5.fc20-i386 u65-b17) OpenJDK Server VM (build 24.65-b04, mixed mode)  以下、Apple TVのIPアドレスは192.168.11.8で記載してあります。
1. 動画/画像を送る airstream を利用します。
インストール $ sudo yum install -y avahi-compat-libdns_sd-devel $ gem install airstream  動画を再生 $ airstream http://example.com/sample.mp4 -o 192.</description>
    </item>
    
    <item>
      <title>earthquakeのつぶやきをFedoraのデスクトップに通知する</title>
      <link>https://kachina.github.io/post/2014-06-22-earthquake-notify/</link>
      <pubDate>Sun, 22 Jun 2014 12:23:37 +0900</pubDate>
      
      <guid>https://kachina.github.io/post/2014-06-22-earthquake-notify/</guid>
      <description>Twitterクライアントにearthquakeを使っています。
今回は、ここに流れてくる&amp;rdquo;つぶやき&amp;rdquo;をFedoraのデスクトップに通知したいと思います。
と言っても、標準で入っているnotify-sendコマンドに値を渡すだけ
そのためのスクリプトが↓こちら
 これを~/.earthquake/plugin/に設置してearthquakeを再起動する。
なかなかいい感じです。</description>
    </item>
    
    <item>
      <title>tmuxのコピーをFedoraのクリップボードに同期する</title>
      <link>https://kachina.github.io/post/2014-06-21-tmux/</link>
      <pubDate>Sat, 21 Jun 2014 20:05:37 +0900</pubDate>
      
      <guid>https://kachina.github.io/post/2014-06-21-tmux/</guid>
      <description>以前に投稿した『tmuxのコピーをMacのクリップボードに同期する』のFedora版です。
操作を統一するために.zshrcや.vimrc等の設定ファイルをDropboxに保管し
Mac/Fedora/AmazonLinux等の環境を跨いで同期しています。
新しい環境を構築したら、Dropboxをインストールして
$ ln -s ~/Dropbox/.../config/_zshrc ~/.zshrc $ ln -s ~/Dropbox/.../config/_vimrc ~/.vimrc $ ... $ ln -s ~/Dropbox/.../config/_tmux.conf ~/.tmux.conf  って感じでシンボリックリンクを貼ることで、すべての環境で設定が同期されます。
この運用、すごく便利だし設定ファイルのバックアップにもなるので
お気に入りなのですが、たまに今回のように環境に依存する問題が発生します。
 OS X: pbcopy Fedora: xsel  今回は、『tmuxのコピーをMacのクリップボードに同期する』の
~/bin/tmux-pbcopyをFedora用に作成することで一旦解決
#!/bin/sh if ! type xsel &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then tmux display-message &amp;quot;Error: cannot copy to clipboard.&amp;quot; exit 0 fi COPY=`tmux save-buffer -` echo &amp;quot;$COPY&amp;quot; &amp;gt; ~/.tmux-buffer xsel -i -b &amp;lt; ~/.tmux-buffer # メッセージ表示 LINES=`echo &amp;quot;$COPY&amp;quot; | wc -l | tr -d &#39; &#39;` tmux display-message &amp;quot;Copy: $LINES lines&amp;quot;  なんか、もっと良い方法を考えないと。。。</description>
    </item>
    
    <item>
      <title>Codeshipでaws-spec実行する</title>
      <link>https://kachina.github.io/post/2014-05-11-aws-spec-on-codeship/</link>
      <pubDate>Sun, 11 May 2014 12:47:37 +0900</pubDate>
      
      <guid>https://kachina.github.io/post/2014-05-11-aws-spec-on-codeship/</guid>
      <description>50回/月まで無料のCIサービスのCodeshipで
aws-specを動かした際のメモ。
1. IAMアカウントの作成 aws-specに利用させるIAMアカウントを作成します。
AWS Management Consoleの[Create New User]から
[codeship](任意)ユーザーを作成し、PolicyTemplateから[Read Only Access]を設定します。
2. aws-specをfork GitHubにてaws-specをforkします。
3. Codeshipにサインアップ Codeshipの[Sign in with GitHub]をクリックしてサインアップ。
4. Projectの作成 トップ画面の[Create my first project!]からプロジェクトを作成します。
 source code provider -&amp;gt; GitHubを選択 repository -&amp;gt; forkしたaws-specを選択  セットアップ画面では以下を設定します。
Select your technology to prepopulate basic commands Ruby  Modify your Setup Commands rvm use 2.1.1 bundle install  Modify your Test Commands bundle exec rspec  [SAVE AND GO TO DASHBOARD]をクリックすると</description>
    </item>
    
    <item>
      <title>このブログの投稿方法</title>
      <link>https://kachina.github.io/post/2014-04-19-blog-entry/</link>
      <pubDate>Sat, 19 Apr 2014 11:03:37 +0900</pubDate>
      
      <guid>https://kachina.github.io/post/2014-04-19-blog-entry/</guid>
      <description>めったに書かないブログで、大抵の場合は新しいディストリをインストールして遊んでるとき
そんなんで、投稿の度にソノ手順がわからなくなる
んなもんで、このブログ自体にブログの投稿手順を投稿しておこうと思う。
構成 このブログはGitHub Pages + jekyll + Octpressで構成されている。
準備 BitBucketのblogリポジトリをclone $ git clone git@bitbucket.org:kachina/blog.git  パッケージのインストール $ cd blog $ bundle install --path vendor/bundle  新しい記事の投稿手順 新規記事の作成 $ bundle exec rake new_post\[&amp;quot;title&amp;quot;\] [blog(source)] mkdir -p source/_posts Creating new post: source/_posts/yyyy-mm-dd-title.markdown  記事の編集 $ vim source/_posts/yyyy-mm-dd-title.markdown  記事のプレビュー $ bundle exec rake generate $ bundle exec rake preview  http://localhost:4000/blog/で内容を確認
記事の公開 $ bundle exec rake gen_deploy  BitBucketにPush $ git add .</description>
    </item>
    
    <item>
      <title>tmuxのコピーをMacのクリップボードに同期する</title>
      <link>https://kachina.github.io/post/2012-10-06-tmux/</link>
      <pubDate>Sat, 06 Oct 2012 11:03:37 +0900</pubDate>
      
      <guid>https://kachina.github.io/post/2012-10-06-tmux/</guid>
      <description>ささやかだけど役にたつことなので、備忘録の意味も含めて投稿します。
Macでiterm2+zsh+tmux+vim環境で開発をしているのですが、コピー＆ペーストが不便でした。
 vimの場合
ビジュアルモードで範囲指定して【y】でヤンクして、【p】でペースト
 tmuxの場合
【ctrl】+【b】→【[】でコピーモードに入り、【space】と【return】で範囲を指定しコピーして、【ctrl】+【b】→【]】でペースト
 macの場合
マウスで対象範囲を選択し【command】+【c】でコピーして、【command】+【v】でペースト
  この マウスで対象範囲を選択 って操作がとてもストレスなので、
tmuxでコピーした内容をMacのクリップボードに同期する様にしてみました。
 reattach-to-user-namespaceのインストール  sudo brew install reattach-to-user-namespace   コピースクリプトの作成  $ mkdir ~/bin $ touch ~/bin/tmux-pbcopy $ chmod 744 ~/bin/tmux-pbcopy  スクリプトの内容は以下のとおり。
#!/bin/sh if ! type pbcopy &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 || ! type reattach-to-user-namespace &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then tmux display-message &amp;quot;Error: cannot copy to clipboard.&amp;quot; exit 0 fi COPY=`tmux save-buffer -` echo &amp;quot;$COPY&amp;quot; | reattach-to-user-namespace pbcopy # メッセージ表示 LINES=`echo &amp;quot;$COPY&amp;quot; | wc -l | tr -d &#39; &#39;` tmux display-message &amp;quot;Copy: $LINES lines&amp;quot;   tmux.</description>
    </item>
    
    <item>
      <title>newsbeuter on Mac</title>
      <link>https://kachina.github.io/post/2012-09-06-newsbeuter/</link>
      <pubDate>Thu, 06 Sep 2012 11:03:37 +0900</pubDate>
      
      <guid>https://kachina.github.io/post/2012-09-06-newsbeuter/</guid>
      <description>約1年ぶりに個人ブログ向けのネタができたので投稿します。
若者のRSS離れが深刻らしいって記事を読みました。
僕はiGoogleが大好きで、サービス開始の2005年から『ポータル』＋『ブックマーク』＋『RSSリーダ』として長年愛用していました。
しかし、7月のGoogleの発表にて2013年11月01日をもってサービスをクローズすると言うではないですか。。。
これにはまいった、ってことでiGoogleの代わりを検討／検証を始めました。
1.『ポータル』について 『ポータル』としては、以下を利用していました。
計算機
乗換案内
ナショナルジオグラフィックの今日の一枚
Wikipedia検索
Gmail:新着メール
GoogleLatitude
この殆どが、Macのダッシュボードで再現できたのでコレを持って解決とします。
2.『ブックマーク』について 先日まで、MacのメインブラウザがSRWare Iron、iPhone/iPadがSafariだったので非常に苦労していました。
しかし、最近iPhone/iPad版のChromeがリリースしたこと、
デバイス間のタブ同期が標準で利用可能なことから、全デバイスのブラウザをChromeに統一しました。
これにより、Chromeのブックマーク同期機能が利用可能となったのでソレを持って解決としました。
3.『RSSリーダ』について さて、噺の枕が長くなりましたが、ここからが本題です。
個人的には、アプリケーションを多数起動してリソースを蝕まれるのがとてもキライなので
できるだけターミナル（iTerm2）とブラウザ（Chrome）以外は起動したくないと考えています。
上記に加えて、業務にて利用するWebサービスが多い為、業務時間中は常に10個近いタブを開いており
1GB程度のメモリをブラウザにを持ってかれています。コレも何とか改善したいトコロです。
そこで、&amp;rdquo;CUIで出来ることはCUIでヤル&amp;rdquo;を基本指針として環境を整えています。
現在、TwitterはCUIで利用できるearthquakeを使っているのですが
これと同様に、RSSもCUIで便利に使えないかと調べてみたところ『newsbeuter』ってのが
なかなか良さそうなので試してみました。
まずはインストール
$ sudo brew tap posativ/homebrew-newsbeuter $ sudo brew install newsbeuter  RSSフィードの設定 urlsファイルを作成して購読したいRSSフィードを追記
$ echo &amp;quot;http://feeds.feedburner.com/mactegaki&amp;quot; &amp;gt;&amp;gt; ~/.newsbeuter/urls  起動
$ newsbeuter  たったこれダケで利用が開始できます。
画面下にガイドが出ていて良い感じです。
と思ったのですが。。。
対象記事をブラウザで開く為の
『o』コマンドが効かない！！
調べてみて納得、同コマンドは初期設定ではCUIブラウザであるlynxにて起動されるそうです。
CUIのRSSリーダなので、CUIブラウザで開くのは自然な流れですね。
だがしかし、今回は対象ページはChromeで開いて頂きたい。
なによりCUIブラウザは不便なので使いたくない。
なんとかならない物かとGoogle先生に聞いてみたのですが、さっぱり解決策を教えてくれません。
試行錯誤することn時間、やっとChromeで開くことに成功しました。
まず、newsbeuterの設定は~/.newsbeuter/configに記載することができ
『browser』パラメータを設定することで、対象ブラウザを変更することできます。
例えば『browser w3m』とするとlynxからw3mに変更されます。</description>
    </item>
    
    <item>
      <title>半角を1、全角を2文字として文字数をカウント</title>
      <link>https://kachina.github.io/post/2011-04-18-char/</link>
      <pubDate>Mon, 18 Apr 2011 11:03:37 +0900</pubDate>
      
      <guid>https://kachina.github.io/post/2011-04-18-char/</guid>
      <description>別システムとのデータ連携で『全角10／半角20文字』なんてのが良くあります。
sjisやeucの名残なのかな。。。
今回もそんなお話で、企業間EDIの案件で
既存データ内に上限文字数を超過したレコードを
ピックアップしてあげて、クライアントにデータ調整をしてもらうことになりました。
深く考えないで、リストアップ作業を請け負ったのですが
UTF-8は可変長の1～4バイトなので単純に、char_lenght()やoctet_length()じゃダメだったのね
それではってコトで、先のルールでカウントを取れるストアド作ったので掲載します。
【ソース】 CREATE OR REPLACE FUNCTION original_length(v_text IN varchar) RETURNS integer AS &#39; DECLARE i_cnt integer default 0; i_ret integer default 0; BEGIN IF v_text IS NULL OR v_text = \&#39;\&#39; THEN return 0; END IF; FOR i_cnt IN 1..LENGTH(v_text) LOOP IF 1 &amp;lt; OCTET_LENGTH(SUBSTR(v_text, i_cnt, 1)) THEN i_ret := i_ret + 2; ELSE i_ret := i_ret + 1; END IF; END LOOP; RETURN i_ret; END; &#39; LANGUAGE plpgsql;  【使用例】 example_db=# SELECT ORIGINAL_LENGTH(&#39;あいうえお&#39;); original_length ----------------- 10 (1 row) example_db=# SELECT ORIGINAL_LENGTH(&#39;abcdefあいうえお&#39;); original_length ----------------- 16 (1 row) example_db=# SELECT id, example_db-# name example_db-# FROM products example_db-# WHERE 20 &amp;lt; ORIGINAL_LENGTH(name) example_db-# ORDER BY id;  ばっちし！</description>
    </item>
    
    <item>
      <title>stoneでファイアウォールを越えてssh接続</title>
      <link>https://kachina.github.io/post/2011-02-17-stone/</link>
      <pubDate>Thu, 17 Feb 2011 11:03:37 +0900</pubDate>
      
      <guid>https://kachina.github.io/post/2011-02-17-stone/</guid>
      <description>セキュリティ意識が高まった昨今では、内部から外部への公開ポートも制限することが多く
下の図のように、http(80)とhttps(443)以外は利用不可としている場所で作業をすることが増えてきました。
+----+ +----------+ +----------+ | PC |-----------| FireWall |------| MyServer | +----+ +----------+ +----------+ 80,443のみ許可 ---------------&amp;gt; | | |--- PrivateNetwork ---| |----- Internet -----| | | | |  準備の悪い僕は、使い馴れた『.vimrc』ファイルが欲しくなったり
昨晩に書いた『ソース』が見たくなったり、『秘密鍵』が欲しくなったり&amp;hellip;etc
と、【MyServer】にssh接続さえできれば、ちゃちゃっとやっつけられる事に余計な労力をかけることがしばしば・・・
『便利と危険は表裏一体』なんて言葉がありますが
論理的な理由なく不便を強いられている方は、たまったもんじゃないのです。
ってことで、心に誓います。
この状況をくぐり抜けて【MyServer】にssh接続してやるんだ
ルールは2つ  足が付かないこと 汎用的であること  このルールに従い、DMZ環境のサーバを踏むことはNGとしました。
そんで、見つけたのが『stone』
アプリケーションレベルのTPC/UDPパケットリピータです。
実行イメージは↓こんな感じ。 * 【PC】から【MyServer】間は443番ポートにて通信し * 【MyServer】内で『stone』が443番ポートのパケットを22番ポートに中継 * 【MyServer】の『sshd』は、通常のsshリクエストとしてコネクションを確立
+----+ +----------+ +----------+ | PC |-----------| FireWall |-------------| MyServer | +----+ 80,443 +----------+ internet +----------+ のみ許可 | | |------------------ 443 --------------[stone]-- 22 --| | |  環境構築手順は以下のとおり。</description>
    </item>
    
    <item>
      <title>PostgreSQLのバキュームにてハマる</title>
      <link>https://kachina.github.io/post/2011-01-10-pgsql-vacuum/</link>
      <pubDate>Mon, 10 Jan 2011 11:03:37 +0900</pubDate>
      
      <guid>https://kachina.github.io/post/2011-01-10-pgsql-vacuum/</guid>
      <description>案件によって、色々なRDBを使うのだけど、今回はPostgreSQLのおはなし。
[postgres@devsrv ~]$ psql -l Password for user postgres: List of databases Name | Owner | Encoding ------------+----------+---------- foo_db | foo | UTF8 bar_db | bar | UTF8 postgres | postgres | UTF8 template0 | postgres | UTF8 template1 | postgres | UTF8 (5 rows)  定期的にvacuumをしなくちゃいけないってのは知ってたので
サービスで使っているデータベース『foo_db』と『bar_db』に対しては
日次処理でvacuumを実行していたのだけど
運用から３年弱で、予期せぬエラーが
WARNING: database &amp;quot;postgres&amp;quot; must be vacuumed within 9183172 transactions HINT: To avoid a database shutdown, execute a full-database VACUUM in &amp;quot;postgres&amp;quot;.</description>
    </item>
    
    <item>
      <title>mysqlでtab補完</title>
      <link>https://kachina.github.io/post/2010-12-17-mysql/</link>
      <pubDate>Fri, 17 Dec 2010 01:18:37 +0900</pubDate>
      
      <guid>https://kachina.github.io/post/2010-12-17-mysql/</guid>
      <description>postgresqlだと、デフォでtab補完が有効なんだけど mysqlでは、次の設定が必要。
my.cnf
[mysql]no-auto-rehash  これを、↓のようにします。
[mysql]auto-rehash  んで、mysqldを再起動すればバッチシ</description>
    </item>
    
    <item>
      <title>カラーモード『CMYK』のPDF → サムネイル化に失敗</title>
      <link>https://kachina.github.io/post/2010-12-06-cmyk-pdf/</link>
      <pubDate>Mon, 06 Dec 2010 11:03:00 +0900</pubDate>
      
      <guid>https://kachina.github.io/post/2010-12-06-cmyk-pdf/</guid>
      <description>ImageMagickを使って、PDFファイルからJpegのサムネイルを作ってるのだけど
PDFのカラーモードが『RGB』の場合は問題ないのだけど、『CMYK』の場合はreadImage()でエラーになる。
開発で使ってる環境は
↓こんな感じ
 CentOS 5.4 PHP 5.3.2  example.php $filePath = &#39;/tmp/foo.pdf&#39;; $type = &#39;jpeg&#39;;$maxH = 125; $maxW = 175; $image = new imagick(); $image-&amp;gt;readImage($filePath); $image-&amp;gt;setImageFormat($type); $image-&amp;gt;thumbnailImage($maxW, $maxH, true); $result = $image-&amp;gt;writeImage($thumnailPath);$image-&amp;gt;destroy();  apache:error.log ESP Ghostscript 815.02: Unrecoverable error, exit code 1 [Mon Dec 06 16:11:18 2010] [error] [client xxx.xxx.xxx.xxx] Postscript delegate failed `/tmp/magick-XXPtZKJQ&#39;: /magick-XXQBr4Ok.cache @ error/pdf.c/ReadPDFImage/638, referer: http://dev.kachina.local/example.php  んで、いろいろ調べてみたらimagickでPDFを読み込む時に、『ghostscript』ってのを使ってて CentOS5.4のyumリポジトリから提供されてる最新が『8.15』なのさ。 こいつが『8.71』以前だと、この現象が発生することが判明。
回避策は、バージョンを上げちゃうこと。
回避策 まずは、バージョンの確認・バックアップ取得
[root@devsrv ~]# gs -v ESP Ghostscript 8.</description>
    </item>
    
    <item>
      <title>Redmine Todo Lists plugin を使ってみた</title>
      <link>https://kachina.github.io/post/2010-01-18-redmine/</link>
      <pubDate>Mon, 18 Jan 2010 11:03:00 +0900</pubDate>
      
      <guid>https://kachina.github.io/post/2010-01-18-redmine/</guid>
      <description>Redmine Todo Lists pluginのインストールしてみました。
結構便利なプラグインなのに、日本語の情報があまりなくて苦労したのでここに残しておきます。
インストールした環境は以下のとおり。
&amp;gt; CentOS 5.3 &amp;gt; Rails 2.3.5 &amp;gt; Redmine 0.8.7
こちら 以下のページの最下部の手順に従ってインストールする。
（『git clone ～』に失敗したので、ページ最上部の『Download Source』から取得しました）
【エラー１】プロジェクトの『Todoリスト』に1件以上のTodoが存在するとエラーとなる。
 ActionView::TemplateError (wrong number of arguments (2 for 1)) on line #26 of todos/_todo.html.erb:
 こちら のページに従って、２ファイルを編集します。
【エラー２】『マイTodoリスト』を押下するとエラーとなる。
エラーメッセージ：ActionView::TemplateError ～中略～ on line #11 of todos/_new_todo.html.erb:
以下のとおり、２つの『routes.rb』が有るのですが、ファイル１の方が適用されることが問題でした。
 ファイル１ &amp;gt; ./vendor/plugins/redmine_todos_plugin/routes.rb
 ファイル２ &amp;gt; ./vendor/plugins/redmine_todos_plugin/config/routes.rb
  cp ./vendor/plugins/redmine_todos_plugin/config/routes.rb ¥ ./vendor/plugins/redmine_todos_plugin/routes.rb  以上で、正常にTodo機能が使えるようになりました。</description>
    </item>
    
  </channel>
</rss>